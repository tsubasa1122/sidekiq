#!/usr/bin/env ruby
mod = Module.new do
  # 1. trapの定義場所をログに書き出す caller
  # 2. trapのブロックを実行する前に、何らかのログを出す ブロックをwrapする
  def trap(sig, command = nil, &block)
    defined_from = caller[0]
    puts "defined_from: #{defined_from}, sig:#{sig}, command:#{command}"

    if command
      super(sig, command)
    else
      super(sig) do
        puts "sigtermが呼ばれたよ #{defined_from}"
        block.call
      end
    end
  end
end

Signal.singleton_class.prepend(mod)
Kernel.singleton_class.prepend(mod)
Signal.prepend(mod)
Kernel.prepend(mod)

# Quiet some warnings we see when running in warning mode:
# RUBYOPT=-w bundle exec sidekiq
$TESTING = false

require_relative "../lib/sidekiq/cli"

def integrate_with_systemd
  return unless ENV["NOTIFY_SOCKET"]

  Sidekiq.configure_server do |config|
    Sidekiq.logger.info "Enabling systemd notification integration"
    require "sidekiq/sd_notify"
    config.on(:startup) do
      Sidekiq::SdNotify.ready
    end
    config.on(:shutdown) do
      Sidekiq::SdNotify.stopping
    end
    Sidekiq.start_watchdog if Sidekiq::SdNotify.watchdog?
  end
end

begin
  cli = Sidekiq::CLI.instance
  cli.parse

  integrate_with_systemd

  cli.run
rescue => e
  raise e if $DEBUG
  if Sidekiq.error_handlers.length == 0
    warn e.message
    warn e.backtrace.join("\n")
  else
    cli.handle_exception e
  end

  exit 1
end
